/**
 * Generated by orval v7.10.0 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import type {
  AddTeamMemberDto,
  CreateProjectDto,
  ProjectPresenter,
  RemoveTeamMemberDto,
  UpdateProjectDto
} from '.././models';


export type updateProjectResponse200 = {
  data: ProjectPresenter
  status: 200
}
    
export type updateProjectResponseComposite = updateProjectResponse200;
    
export type updateProjectResponse = updateProjectResponseComposite & {
  headers: Headers;
}

export const getUpdateProjectUrl = () => {


  

  return `http://localhost:8080/project/updateProject`
}

export const updateProject = async (updateProjectDto: UpdateProjectDto, options?: RequestInit): Promise<updateProjectResponse> => {
  
  const res = await fetch(getUpdateProjectUrl(),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateProjectDto,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: updateProjectResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as updateProjectResponse
}


export type removeTeamMemberResponse200 = {
  data: ProjectPresenter
  status: 200
}
    
export type removeTeamMemberResponseComposite = removeTeamMemberResponse200;
    
export type removeTeamMemberResponse = removeTeamMemberResponseComposite & {
  headers: Headers;
}

export const getRemoveTeamMemberUrl = () => {


  

  return `http://localhost:8080/project/removeTeamMember`
}

export const removeTeamMember = async (removeTeamMemberDto: RemoveTeamMemberDto, options?: RequestInit): Promise<removeTeamMemberResponse> => {
  
  const res = await fetch(getRemoveTeamMemberUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      removeTeamMemberDto,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: removeTeamMemberResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as removeTeamMemberResponse
}


export type createProjectResponse200 = {
  data: ProjectPresenter
  status: 200
}
    
export type createProjectResponseComposite = createProjectResponse200;
    
export type createProjectResponse = createProjectResponseComposite & {
  headers: Headers;
}

export const getCreateProjectUrl = () => {


  

  return `http://localhost:8080/project/createProject`
}

export const createProject = async (createProjectDto: CreateProjectDto, options?: RequestInit): Promise<createProjectResponse> => {
  
  const res = await fetch(getCreateProjectUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createProjectDto,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: createProjectResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as createProjectResponse
}


export type addTeamMemberResponse200 = {
  data: ProjectPresenter
  status: 200
}
    
export type addTeamMemberResponseComposite = addTeamMemberResponse200;
    
export type addTeamMemberResponse = addTeamMemberResponseComposite & {
  headers: Headers;
}

export const getAddTeamMemberUrl = () => {


  

  return `http://localhost:8080/project/addTeamMember`
}

export const addTeamMember = async (addTeamMemberDto: AddTeamMemberDto, options?: RequestInit): Promise<addTeamMemberResponse> => {
  
  const res = await fetch(getAddTeamMemberUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      addTeamMemberDto,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: addTeamMemberResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as addTeamMemberResponse
}


export type getAllProjectsResponse200 = {
  data: ProjectPresenter[]
  status: 200
}
    
export type getAllProjectsResponseComposite = getAllProjectsResponse200;
    
export type getAllProjectsResponse = getAllProjectsResponseComposite & {
  headers: Headers;
}

export const getGetAllProjectsUrl = () => {


  

  return `http://localhost:8080/project/getAllProjects`
}

export const getAllProjects = async ( options?: RequestInit): Promise<getAllProjectsResponse> => {
  
  const res = await fetch(getGetAllProjectsUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getAllProjectsResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getAllProjectsResponse
}


